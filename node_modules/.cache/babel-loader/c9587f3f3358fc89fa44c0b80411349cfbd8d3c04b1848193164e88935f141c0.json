{"ast":null,"code":"var _jsxFileName = \"/Users/ssuresh/Desktop/Bingo/buzzword-bingo/src/BuzzwordBoard.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport BuzzwordCell from './BuzzwordCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BuzzwordBoardContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n_c = BuzzwordBoardContainer;\nconst BoardGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.numCols}, 1fr);\n  grid-gap: 10px;\n  max-width: 500px;\n  margin: 0 auto;\n`;\n_c2 = BoardGrid;\nconst BuzzwordBoard = _ref => {\n  let {\n    buzzwords,\n    markedCells,\n    onCellClick\n  } = _ref;\n  const numCols = 5; // Modify this value to change the number of columns\n  const numRows = Math.ceil(buzzwords.length / numCols);\n  const isRowHighlighted = rowIndex => {\n    for (let col = 0; col < numCols; col++) {\n      const index = rowIndex * numCols + col;\n      if (!markedCells[index]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const isColHighlighted = colIndex => {\n    for (let row = 0; row < numRows; row++) {\n      const index = row * numCols + colIndex;\n      if (!markedCells[index]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const isDiagonalHighlighted = () => {\n    const leftDiagonal = [];\n    const rightDiagonal = [];\n    for (let i = 0; i < numRows; i++) {\n      leftDiagonal.push(i * (numCols + 1));\n      rightDiagonal.push((i + 1) * (numCols - 1));\n    }\n    const isLeftDiagonalMarked = leftDiagonal.every(index => markedCells[index]);\n    const isRightDiagonalMarked = rightDiagonal.every(index => markedCells[index]);\n    return isLeftDiagonalMarked || isRightDiagonalMarked;\n  };\n  const isBingo = () => {\n    // Check rows\n    for (let row = 0; row < numRows; row++) {\n      if (isRowHighlighted(row)) {\n        return true;\n      }\n    }\n\n    // Check columns\n    for (let col = 0; col < numCols; col++) {\n      if (isColHighlighted(col)) {\n        return true;\n      }\n    }\n\n    // Check diagonals\n    if (isDiagonalHighlighted()) {\n      return true;\n    }\n    return false;\n  };\n  const handleCellClick = index => {\n    onCellClick(index);\n    if (isBingo()) {\n      // Bingo achieved!\n      console.log('Bingo!');\n    }\n  };\n  const middleIndex = Math.floor(numCols * numRows / 2);\n  return /*#__PURE__*/_jsxDEV(BuzzwordBoardContainer, {\n    children: /*#__PURE__*/_jsxDEV(BoardGrid, {\n      numCols: numCols,\n      children: [buzzwords.map((buzzword, index) => {\n        const row = Math.floor(index / numCols);\n        const col = index % numCols;\n        const isHighlighted = isRowHighlighted(row) || isColHighlighted(col);\n        return /*#__PURE__*/_jsxDEV(BuzzwordCell, {\n          value: buzzword,\n          isMarked: markedCells[index],\n          isHighlighted: isHighlighted,\n          onClick: () => handleCellClick(index) // Use handleCellClick as the onClick handler\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(BuzzwordCell, {\n        value: \"Free\",\n        isMarked: true // Assume the free slot is always marked\n        ,\n        isHighlighted: true // Highlight the free slot\n      }, middleIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_c3 = BuzzwordBoard;\nexport default BuzzwordBoard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"BuzzwordBoardContainer\");\n$RefreshReg$(_c2, \"BoardGrid\");\n$RefreshReg$(_c3, \"BuzzwordBoard\");","map":{"version":3,"names":["React","styled","BuzzwordCell","jsxDEV","_jsxDEV","BuzzwordBoardContainer","div","_c","BoardGrid","props","numCols","_c2","BuzzwordBoard","_ref","buzzwords","markedCells","onCellClick","numRows","Math","ceil","length","isRowHighlighted","rowIndex","col","index","isColHighlighted","colIndex","row","isDiagonalHighlighted","leftDiagonal","rightDiagonal","i","push","isLeftDiagonalMarked","every","isRightDiagonalMarked","isBingo","handleCellClick","console","log","middleIndex","floor","children","map","buzzword","isHighlighted","value","isMarked","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/ssuresh/Desktop/Bingo/buzzword-bingo/src/BuzzwordBoard.tsx"],"sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport BuzzwordCell from './BuzzwordCell';\n\ntype BuzzwordBoardProps = {\n    buzzwords: string[];\n    markedCells: boolean[];\n    onCellClick: (index: number) => void;\n};\n\nconst BuzzwordBoardContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst BoardGrid = styled.div<{ numCols: number }>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => props.numCols}, 1fr);\n  grid-gap: 10px;\n  max-width: 500px;\n  margin: 0 auto;\n`;\n\nconst BuzzwordBoard: React.FC<BuzzwordBoardProps> = ({\n    buzzwords,\n    markedCells,\n    onCellClick,\n}) => {\n    const numCols = 5; // Modify this value to change the number of columns\n    const numRows = Math.ceil(buzzwords.length / numCols);\n\n    const isRowHighlighted = (rowIndex: number) => {\n        for (let col = 0; col < numCols; col++) {\n            const index = rowIndex * numCols + col;\n            if (!markedCells[index]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    const isColHighlighted = (colIndex: number) => {\n        for (let row = 0; row < numRows; row++) {\n            const index = row * numCols + colIndex;\n            if (!markedCells[index]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    const isDiagonalHighlighted = () => {\n        const leftDiagonal = [];\n        const rightDiagonal = [];\n\n        for (let i = 0; i < numRows; i++) {\n            leftDiagonal.push(i * (numCols + 1));\n            rightDiagonal.push((i + 1) * (numCols - 1));\n        }\n\n        const isLeftDiagonalMarked = leftDiagonal.every(\n            (index) => markedCells[index]\n        );\n        const isRightDiagonalMarked = rightDiagonal.every(\n            (index) => markedCells[index]\n        );\n\n        return isLeftDiagonalMarked || isRightDiagonalMarked;\n    };\n\n    const isBingo = () => {\n        // Check rows\n        for (let row = 0; row < numRows; row++) {\n            if (isRowHighlighted(row)) {\n                return true;\n            }\n        }\n\n        // Check columns\n        for (let col = 0; col < numCols; col++) {\n            if (isColHighlighted(col)) {\n                return true;\n            }\n        }\n\n        // Check diagonals\n        if (isDiagonalHighlighted()) {\n            return true;\n        }\n\n        return false;\n    };\n\n    const handleCellClick = (index: number) => {\n        onCellClick(index);\n\n        if (isBingo()) {\n            // Bingo achieved!\n            console.log('Bingo!');\n        }\n    };\n\n    const middleIndex = Math.floor(numCols * numRows / 2);\n\n    return (\n        <BuzzwordBoardContainer>\n            <BoardGrid numCols={numCols}>\n                {buzzwords.map((buzzword, index) => {\n                    const row = Math.floor(index / numCols);\n                    const col = index % numCols;\n                    const isHighlighted = isRowHighlighted(row) || isColHighlighted(col);\n\n                    return (\n                        <BuzzwordCell\n                            key={index}\n                            value={buzzword}\n                            isMarked={markedCells[index]}\n                            isHighlighted={isHighlighted}\n                            onClick={() => handleCellClick(index)} // Use handleCellClick as the onClick handler\n                        />\n                    );\n                })}\n                {/* Add the free slot cell in the middle */}\n                <BuzzwordCell\n                    key={middleIndex}\n                    value=\"Free\"\n                    isMarked={true} // Assume the free slot is always marked\n                    isHighlighted={true} // Highlight the free slot\n                />\n            </BoardGrid>\n        </BuzzwordBoardContainer>\n    );\n};\n\nexport default BuzzwordBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}