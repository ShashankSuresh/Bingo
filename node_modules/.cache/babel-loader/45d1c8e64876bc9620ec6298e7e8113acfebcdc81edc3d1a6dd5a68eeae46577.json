{"ast":null,"code":"var _jsxFileName = \"/Users/ssuresh/Desktop/Bingo/buzzword-bingo/src/BuzzwordBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport BuzzwordCell from './BuzzwordCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BuzzwordBoardContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n_c = BuzzwordBoardContainer;\nconst BoardGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.numcols}, 1fr);\n  max-width: 500px;\n  margin: 0 auto;\n  text-align: center;\n`;\n_c2 = BoardGrid;\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 999;\n`;\n_c3 = Overlay;\nconst CongratsMessage = styled.h2`\n  color: #fff;\n  font-size: 24px;\n  text-align: center;\n`;\n_c4 = CongratsMessage;\nconst BuzzwordBoard = _ref => {\n  _s();\n  let {\n    numcols,\n    numrows,\n    buzzwords,\n    markedCells,\n    handleCellClick\n  } = _ref;\n  const isCenterCell = (row, col) => row === Math.floor(numrows / 2) && col === Math.floor(numcols / 2);\n  const isLeftDiagonalCell = (row, col) => row === col;\n  const isRightDiagonalCell = (row, col) => row + col === numcols - 1;\n  const isRowHighlighted = row => Array.from({\n    length: numcols\n  }, (_, col) => markedCells[row * numcols + col]).every(Boolean);\n  const isColHighlighted = col => Array.from({\n    length: numrows\n  }, (_, row) => markedCells[row * numcols + col]).every(Boolean);\n  const isDiagonalHighlighted = (row, col) => {\n    if (isCenterCell(row, col)) return false;\n    if (isLeftDiagonalCell(row, col)) return isRowHighlighted(row);\n    if (isRightDiagonalCell(row, col)) return isRowHighlighted(row);\n    return false;\n  };\n  const isBingo = () => {\n    // Check rows\n    const isAnyRowBingo = Array.from({\n      length: numrows\n    }, (_, row) => isRowHighlighted(row)).some(Boolean);\n    if (isAnyRowBingo) return true;\n\n    // Check columns\n    const isAnyColBingo = Array.from({\n      length: numcols\n    }, (_, col) => isColHighlighted(col)).some(Boolean);\n    if (isAnyColBingo) return true;\n\n    // Check diagonals\n    const isAnyDiagonalBingo = Array.from({\n      length: numrows\n    }, (_, row) => Array.from({\n      length: numcols\n    }, (_, col) => isDiagonalHighlighted(row, col)).some(Boolean)).some(Boolean);\n    if (isAnyDiagonalBingo) return true;\n    return false;\n  };\n  const [showOverlay, setShowOverlay] = useState(false);\n  useEffect(() => {\n    if (isBingo()) {\n      setShowOverlay(true);\n    }\n  }, [markedCells]);\n  return /*#__PURE__*/_jsxDEV(BuzzwordBoardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(BoardGrid, {\n      numcols: numcols,\n      children: buzzwords.map((buzzword, index) => {\n        const row = Math.floor(index / numcols);\n        const col = index % numcols;\n        const ishighlighted = isRowHighlighted(row) || isColHighlighted(col) || isDiagonalHighlighted(row, col);\n        return /*#__PURE__*/_jsxDEV(BuzzwordCell, {\n          value: buzzword,\n          ismarked: markedCells[index],\n          ishighlighted: ishighlighted,\n          onClick: () => handleCellClick(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), showOverlay && /*#__PURE__*/_jsxDEV(Overlay, {\n      children: /*#__PURE__*/_jsxDEV(CongratsMessage, {\n        children: \"Congratulations, you got a Bingo!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(BuzzwordBoard, \"DCnyBHiTghUeAcfJ5u670L8PDMU=\");\n_c5 = BuzzwordBoard;\nexport default BuzzwordBoard;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"BuzzwordBoardContainer\");\n$RefreshReg$(_c2, \"BoardGrid\");\n$RefreshReg$(_c3, \"Overlay\");\n$RefreshReg$(_c4, \"CongratsMessage\");\n$RefreshReg$(_c5, \"BuzzwordBoard\");","map":{"version":3,"names":["React","useEffect","useState","styled","BuzzwordCell","jsxDEV","_jsxDEV","BuzzwordBoardContainer","div","_c","BoardGrid","props","numcols","_c2","Overlay","_c3","CongratsMessage","h2","_c4","BuzzwordBoard","_ref","_s","numrows","buzzwords","markedCells","handleCellClick","isCenterCell","row","col","Math","floor","isLeftDiagonalCell","isRightDiagonalCell","isRowHighlighted","Array","from","length","_","every","Boolean","isColHighlighted","isDiagonalHighlighted","isBingo","isAnyRowBingo","some","isAnyColBingo","isAnyDiagonalBingo","showOverlay","setShowOverlay","children","map","buzzword","index","ishighlighted","value","ismarked","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c5","$RefreshReg$"],"sources":["/Users/ssuresh/Desktop/Bingo/buzzword-bingo/src/BuzzwordBoard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport BuzzwordCell from './BuzzwordCell';\n\ntype BuzzwordBoardProps = {\n    buzzwords: string[];\n    markedCells: boolean[];\n    handleCellClick: (index: number) => void;\n    numcols: number;\n    numrows: number;\n};\n\nconst BuzzwordBoardContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst BoardGrid = styled.div<{ numcols: number }>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => props.numcols}, 1fr);\n  max-width: 500px;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 999;\n`;\n\nconst CongratsMessage = styled.h2`\n  color: #fff;\n  font-size: 24px;\n  text-align: center;\n`;\n\nconst BuzzwordBoard: React.FC<BuzzwordBoardProps> = ({ numcols, numrows, buzzwords, markedCells, handleCellClick }) => {\n    const isCenterCell = (row: number, col: number): boolean =>\n        row === Math.floor(numrows / 2) && col === Math.floor(numcols / 2);\n\n    const isLeftDiagonalCell = (row: number, col: number): boolean =>\n        row === col;\n\n    const isRightDiagonalCell = (row: number, col: number): boolean =>\n        row + col === numcols - 1;\n\n    const isRowHighlighted = (row: number): boolean =>\n        Array.from({ length: numcols }, (_, col) =>\n            markedCells[row * numcols + col]\n        ).every(Boolean);\n\n    const isColHighlighted = (col: number): boolean =>\n        Array.from({ length: numrows }, (_, row) =>\n            markedCells[row * numcols + col]\n        ).every(Boolean);\n\n    const isDiagonalHighlighted = (row: number, col: number): boolean => {\n        if (isCenterCell(row, col)) return false;\n\n        if (isLeftDiagonalCell(row, col)) return isRowHighlighted(row);\n\n        if (isRightDiagonalCell(row, col))\n            return isRowHighlighted(row);\n\n        return false;\n    };\n\n    const isBingo = (): boolean => {\n        // Check rows\n        const isAnyRowBingo = Array.from({ length: numrows }, (_, row) =>\n            isRowHighlighted(row)\n        ).some(Boolean);\n\n        if (isAnyRowBingo) return true;\n\n        // Check columns\n        const isAnyColBingo = Array.from({ length: numcols }, (_, col) =>\n            isColHighlighted(col)\n        ).some(Boolean);\n\n        if (isAnyColBingo) return true;\n\n        // Check diagonals\n        const isAnyDiagonalBingo = Array.from({ length: numrows }, (_, row) =>\n            Array.from({ length: numcols }, (_, col) =>\n                isDiagonalHighlighted(row, col)\n            ).some(Boolean)\n        ).some(Boolean);\n\n        if (isAnyDiagonalBingo) return true;\n\n        return false;\n    };\n\n\n\n    const [showOverlay, setShowOverlay] = useState(false);\n\n    useEffect(() => {\n        if (isBingo()) {\n            setShowOverlay(true);\n        }\n    }, [markedCells]);\n\n    return (\n        <BuzzwordBoardContainer>\n            <BoardGrid numcols={numcols}>\n                {buzzwords.map((buzzword, index) => {\n                    const row = Math.floor(index / numcols);\n                    const col = index % numcols;\n                    const ishighlighted = isRowHighlighted(row) || isColHighlighted(col) || isDiagonalHighlighted(row, col);\n\n                    return (\n                        <BuzzwordCell\n                            key={index}\n                            value={buzzword}\n                            ismarked={markedCells[index]}\n                            ishighlighted={ishighlighted}\n                            onClick={() => handleCellClick(index)}\n                        />\n                    );\n                })}\n            </BoardGrid>\n            {showOverlay && (\n                <Overlay>\n                    <CongratsMessage>Congratulations, you got a Bingo!</CongratsMessage>\n                </Overlay>\n            )}\n        </BuzzwordBoardContainer>\n    );\n};\n\nexport default BuzzwordBoard;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}