{"ast":null,"code":"var _jsxFileName = \"/Users/ssuresh/Desktop/Bingo/buzzword-bingo/src/BuzzwordBingo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport BuzzwordBoard from './BuzzwordBoard';\nimport styled from 'styled-components';\nimport Button from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SecondHalf = styled.div`\n    width: 55%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n_c = SecondHalf;\nconst BuzzwordBingo = _ref => {\n  _s();\n  let {\n    buzzwords,\n    numrows,\n    numcols\n  } = _ref;\n  const [markedCells, setMarkedCells] = useState(new Array(25).fill(false));\n  const handleCellClick = index => {\n    if (markedCells[index]) return;\n    setMarkedCells(prev => [...prev.slice(0, index), true, ...prev.slice(index + 1)]);\n  };\n  const handleReset = () => setMarkedCells(Array(numcols * numrows).fill(false));\n  useEffect(() => {\n    // Preselect the center cell (\"Free\")\n    setMarkedCells(prevMarkedCells => {\n      const newMarkedCells = [...prevMarkedCells];\n      const centerCellIndex = Math.floor(numrows * numcols / 2);\n      newMarkedCells[centerCellIndex] = true;\n      return newMarkedCells;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SecondHalf, {\n    children: [/*#__PURE__*/_jsxDEV(BuzzwordBoard, {\n      buzzwords: buzzwords,\n      markedCells: markedCells,\n      handleCellClick: handleCellClick,\n      numcols: numcols,\n      numrows: numrows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(BuzzwordBingo, \"m1/8K7UgLijv4Fr0owXetK+IAsg=\");\n_c2 = BuzzwordBingo;\nexport default BuzzwordBingo;\nvar _c, _c2;\n$RefreshReg$(_c, \"SecondHalf\");\n$RefreshReg$(_c2, \"BuzzwordBingo\");","map":{"version":3,"names":["React","useEffect","useState","BuzzwordBoard","styled","Button","jsxDEV","_jsxDEV","SecondHalf","div","_c","BuzzwordBingo","_ref","_s","buzzwords","numrows","numcols","markedCells","setMarkedCells","Array","fill","handleCellClick","index","prev","slice","handleReset","prevMarkedCells","newMarkedCells","centerCellIndex","Math","floor","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c2","$RefreshReg$"],"sources":["/Users/ssuresh/Desktop/Bingo/buzzword-bingo/src/BuzzwordBingo.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport BuzzwordBoard from './BuzzwordBoard';\nimport styled from 'styled-components';\nimport Button from './Button';\n\ninterface BuzzwordBingoProps {\n    buzzwords: Array<string>,\n    numrows: number,\n    numcols: number,\n}\n\nconst SecondHalf = styled.div`\n    width: 55%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst BuzzwordBingo: React.FC<BuzzwordBingoProps> = ({\n    buzzwords,\n    numrows,\n    numcols,\n}) => {\n    const [markedCells, setMarkedCells] = useState<boolean[]>(new Array(25).fill(false));\n    const handleCellClick = (index: number) => {\n        if (markedCells[index]) return;\n\n        setMarkedCells(prev => [...prev.slice(0, index), true, ...prev.slice(index + 1)]);\n    };\n\n    const handleReset = () => setMarkedCells(Array(numcols * numrows).fill(false));\n\n    useEffect(() => {\n        // Preselect the center cell (\"Free\")\n        setMarkedCells((prevMarkedCells) => {\n            const newMarkedCells = [...prevMarkedCells];\n            const centerCellIndex = Math.floor((numrows * numcols) / 2);\n            newMarkedCells[centerCellIndex] = true;\n            return newMarkedCells;\n        });\n    }, []);\n\n\n    return (\n        <SecondHalf>\n            <BuzzwordBoard\n                buzzwords={buzzwords}\n                markedCells={markedCells}\n                handleCellClick={handleCellClick}\n                numcols={numcols}\n                numrows={numrows}\n            />\n            <Button onClick={handleReset}>Reset</Button>\n        </SecondHalf>\n    );\n};\n\n\nexport default BuzzwordBingo;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9B,MAAMC,UAAU,GAAGJ,MAAM,CAACK,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANIF,UAAU;AAQhB,MAAMG,aAA2C,GAAGC,IAAA,IAI9C;EAAAC,EAAA;EAAA,IAJ+C;IACjDC,SAAS;IACTC,OAAO;IACPC;EACJ,CAAC,GAAAJ,IAAA;EACG,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAY,IAAIiB,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC;EACpF,MAAMC,eAAe,GAAIC,KAAa,IAAK;IACvC,IAAIL,WAAW,CAACK,KAAK,CAAC,EAAE;IAExBJ,cAAc,CAACK,IAAI,IAAI,CAAC,GAAGA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAEF,KAAK,CAAC,EAAE,IAAI,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACF,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EACrF,CAAC;EAED,MAAMG,WAAW,GAAGA,CAAA,KAAMP,cAAc,CAACC,KAAK,CAACH,OAAO,GAAGD,OAAO,CAAC,CAACK,IAAI,CAAC,KAAK,CAAC,CAAC;EAE9EnB,SAAS,CAAC,MAAM;IACZ;IACAiB,cAAc,CAAEQ,eAAe,IAAK;MAChC,MAAMC,cAAc,GAAG,CAAC,GAAGD,eAAe,CAAC;MAC3C,MAAME,eAAe,GAAGC,IAAI,CAACC,KAAK,CAAEf,OAAO,GAAGC,OAAO,GAAI,CAAC,CAAC;MAC3DW,cAAc,CAACC,eAAe,CAAC,GAAG,IAAI;MACtC,OAAOD,cAAc;IACzB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAGN,oBACIpB,OAAA,CAACC,UAAU;IAAAuB,QAAA,gBACPxB,OAAA,CAACJ,aAAa;MACVW,SAAS,EAAEA,SAAU;MACrBG,WAAW,EAAEA,WAAY;MACzBI,eAAe,EAAEA,eAAgB;MACjCL,OAAO,EAAEA,OAAQ;MACjBD,OAAO,EAAEA;IAAQ;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACF5B,OAAA,CAACF,MAAM;MAAC+B,OAAO,EAAEX,WAAY;MAAAM,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAErB,CAAC;AAACtB,EAAA,CArCIF,aAA2C;AAAA0B,GAAA,GAA3C1B,aAA2C;AAwCjD,eAAeA,aAAa;AAAC,IAAAD,EAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}