{"ast":null,"code":"var _jsxFileName = \"/Users/ssuresh/Desktop/Bingo/buzzword-bingo/src/BuzzwordBoard.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport BuzzwordCell from './BuzzwordCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BuzzwordBoardContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n_c = BuzzwordBoardContainer;\nconst BoardGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.numCols}, 1fr);\n  grid-gap: 10px;\n  max-width: 500px;\n  margin: 0 auto;\n`;\n_c2 = BoardGrid;\nconst BuzzwordBoard = _ref => {\n  let {\n    buzzwords,\n    markedCells,\n    onCellClick\n  } = _ref;\n  const numCols = 5; // Modify this value to change the number of columns\n  const numRows = Math.ceil(buzzwords.length / numCols);\n  const isRowHighlighted = rowIndex => {\n    for (let col = 0; col < numCols; col++) {\n      const index = rowIndex * numCols + col;\n      if (!markedCells[index]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const isColHighlighted = colIndex => {\n    for (let row = 0; row < numRows; row++) {\n      const index = row * numCols + colIndex;\n      if (!markedCells[index]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  function isDiagonalHighlighted(row, col) {\n    // Check if it is the center cell\n    if (row === col && row === Math.floor(numRows / 2)) {\n      return false;\n    }\n\n    // Check left diagonal\n    if (row === col) {\n      for (let i = 0; i < numRows; i++) {\n        if (!markedCells[i * numCols + i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    // Check right diagonal\n    if (row + col === numCols - 1) {\n      for (let i = 0; i < numRows; i++) {\n        if (!markedCells[i * numCols + (numCols - 1 - i)]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  const isBingo = () => {\n    // Check rows\n    for (let row = 0; row < numRows; row++) {\n      if (isRowHighlighted(row)) {\n        return true;\n      }\n    }\n\n    // Check columns\n    for (let col = 0; col < numCols; col++) {\n      if (isColHighlighted(col)) {\n        return true;\n      }\n    }\n\n    // Check diagonals\n    if (isDiagonalHighlighted(numRows, numCols)) {\n      return true;\n    }\n    return false;\n  };\n  const handleCellClick = index => {\n    onCellClick(index);\n    if (isBingo()) {\n      // Bingo achieved!\n      console.log('Bingo!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(BuzzwordBoardContainer, {\n    children: /*#__PURE__*/_jsxDEV(BoardGrid, {\n      numCols: numCols,\n      children: buzzwords.map((buzzword, index) => {\n        const row = Math.floor(index / numCols);\n        const col = index % numCols;\n        const isHighlighted = isRowHighlighted(row) || isColHighlighted(col) || isDiagonalHighlighted(row, col);\n        return /*#__PURE__*/_jsxDEV(BuzzwordCell, {\n          value: buzzword,\n          isMarked: markedCells[index],\n          isHighlighted: isHighlighted,\n          onClick: () => handleCellClick(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_c3 = BuzzwordBoard;\nexport default BuzzwordBoard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"BuzzwordBoardContainer\");\n$RefreshReg$(_c2, \"BoardGrid\");\n$RefreshReg$(_c3, \"BuzzwordBoard\");","map":{"version":3,"names":["React","styled","BuzzwordCell","jsxDEV","_jsxDEV","BuzzwordBoardContainer","div","_c","BoardGrid","props","numCols","_c2","BuzzwordBoard","_ref","buzzwords","markedCells","onCellClick","numRows","Math","ceil","length","isRowHighlighted","rowIndex","col","index","isColHighlighted","colIndex","row","isDiagonalHighlighted","floor","i","isBingo","handleCellClick","console","log","children","map","buzzword","isHighlighted","value","isMarked","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/ssuresh/Desktop/Bingo/buzzword-bingo/src/BuzzwordBoard.tsx"],"sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport BuzzwordCell from './BuzzwordCell';\n\ntype BuzzwordBoardProps = {\n    buzzwords: string[];\n    markedCells: boolean[];\n    onCellClick: (index: number) => void;\n};\n\nconst BuzzwordBoardContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst BoardGrid = styled.div<{ numCols: number }>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => props.numCols}, 1fr);\n  grid-gap: 10px;\n  max-width: 500px;\n  margin: 0 auto;\n`;\n\nconst BuzzwordBoard: React.FC<BuzzwordBoardProps> = ({\n    buzzwords,\n    markedCells,\n    onCellClick,\n}) => {\n    const numCols = 5; // Modify this value to change the number of columns\n    const numRows = Math.ceil(buzzwords.length / numCols);\n\n    const isRowHighlighted = (rowIndex: number) => {\n        for (let col = 0; col < numCols; col++) {\n            const index = rowIndex * numCols + col;\n            if (!markedCells[index]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    const isColHighlighted = (colIndex: number) => {\n        for (let row = 0; row < numRows; row++) {\n            const index = row * numCols + colIndex;\n            if (!markedCells[index]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    function isDiagonalHighlighted(row: number, col: number): boolean {\n        // Check if it is the center cell\n        if (row === col && row === Math.floor(numRows / 2)) {\n            return false;\n        }\n\n        // Check left diagonal\n        if (row === col) {\n            for (let i = 0; i < numRows; i++) {\n                if (!markedCells[i * numCols + i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        // Check right diagonal\n        if (row + col === numCols - 1) {\n            for (let i = 0; i < numRows; i++) {\n                if (!markedCells[i * numCols + (numCols - 1 - i)]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n\n    const isBingo = () => {\n        // Check rows\n        for (let row = 0; row < numRows; row++) {\n            if (isRowHighlighted(row)) {\n                return true;\n            }\n        }\n\n        // Check columns\n        for (let col = 0; col < numCols; col++) {\n            if (isColHighlighted(col)) {\n                return true;\n            }\n        }\n\n        // Check diagonals\n        if (isDiagonalHighlighted(numRows, numCols)) {\n            return true;\n        }\n\n        return false;\n    };\n\n    const handleCellClick = (index: number) => {\n        onCellClick(index);\n\n        if (isBingo()) {\n            // Bingo achieved!\n            console.log('Bingo!');\n        }\n    };\n\n    return (\n        <BuzzwordBoardContainer>\n            <BoardGrid numCols={numCols}>\n                {buzzwords.map((buzzword, index) => {\n                    const row = Math.floor(index / numCols);\n                    const col = index % numCols;\n                    const isHighlighted = isRowHighlighted(row) || isColHighlighted(col) || isDiagonalHighlighted(row, col);\n\n                    return (\n                        <BuzzwordCell\n                            key={index}\n                            value={buzzword}\n                            isMarked={markedCells[index]}\n                            isHighlighted={isHighlighted}\n                            onClick={() => handleCellClick(index)}\n                        />\n                    );\n                })}\n            </BoardGrid>\n        </BuzzwordBoardContainer>\n    );\n};\n\nexport default BuzzwordBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}